{
  "paragraphs": [
    {
      "text": "%python.ipython\n#----- IMPORT PACKAGES -----#\nimport logging\nimport random\nimport string\nimport requests\nimport re\nimport pandas as pd\nimport numpy as np\nimport time\nimport traceback\nimport sys\nimport logging\nimport time\nimport socket\n\nfrom cassandra import ConsistencyLevel\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\n\n\nip = socket.gethostbyname(socket.gethostname())",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T23:03:30+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644407604301_1391327620",
      "id": "paragraph_1644407604301_1391327620",
      "dateCreated": "2022-02-09T11:53:24+0000",
      "dateStarted": "2022-02-09T23:03:30+0000",
      "dateFinished": "2022-02-09T23:03:30+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:105"
    },
    {
      "text": "%python.ipython\nKEYSPACE = \"test3\"\ncluster = Cluster([ip])\nsession = cluster.connect()\nsession.set_keyspace(KEYSPACE)",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T23:05:44+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644408309308_924794068",
      "id": "paragraph_1644408309308_924794068",
      "dateCreated": "2022-02-09T12:05:09+0000",
      "dateStarted": "2022-02-09T23:05:44+0000",
      "dateFinished": "2022-02-09T23:05:44+0000",
      "status": "FINISHED",
      "$$hashKey": "object:106"
    },
    {
      "text": "%python.ipython\n#----- DEFINE FUNCTION TO -----#\n#       - DOWNLOAD .CSV FILES\n#       - CREATE TABLES FOR EACH REQUEST\n#       - INSERT TABLES IN CASSANDRA\n\n#----- DOWNLOAD .CSV FILES-----#\ndef get_df(df_row):\n    col2keep = {0: [0, 1, 2, 3, 12, 22, 31, 33, 34, 37, 45, 53, 60],\n                1: [0, 1, 5, 15],\n                2: [0, 1, 3, 4, 8, 10, 11, 12, 15]}\n    colnames = {0: [\"GlobalEventID\",\n                   \"Day\",\n                   \"Month\",\n                   \"Year\",\n                   \"Actor1_Type1Code\",\n                   \"Actor2_Type1Code\",\n                   \"NumMentions\",\n                   \"NumArticles\",\n                   \"AverageTone\",\n                   \"Actor1_GeoCountryCode\",\n                   \"Actor2_GeoCountryCode\",\n                   \"Action_GeoCountryCode\",  #pas utilisé 04/02\n                   \"SourceURL\"],\n                1: [\"GlobalEventID\",\n                    \"EventTimeDate\",\n                    \"MentionID\",\n                    \"MentionDocTranslationalInfo\"],\n                2:[\"GKGRecordID\",\n                   \"Date\", #V2_1_\n                   \"SourceCommonName\", #V2_\n                   \"DocumentIdentifier\", #V2\n                   \"Themes\", #V2_Enhanced\n                   \"Locations\", #V2_Enhanced\n                   \"Persons\", #V1_ \n                   \"Organization\", #V2_Enhanced #pas utilisé 04/02\n                   \"Tone\"]} #V2_\n    names = ['events','mentions','gkg']\n    errors = []\n    df_list = {}\n    url_list = [df_row['events'],df_row['mentions'],df_row['gkg']]\n    \n    for i, link in enumerate(url_list):\n        df_list[names[i]]=pd.read_table(link,\n                                        header=None,\n                                        usecols=col2keep[i],\n                                        names=colnames[i],\n                                        encoding='ISO-8859-1')\n    \n    # GKG preprocessing\n    gkg = df_list[\"gkg\"].copy()\n    gkg = gkg[gkg['Date'].notna()]\n    gkg[\"Day\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:8]))\n    gkg[\"Month\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:6]))\n    gkg[\"Year\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:4]))\n    gkg[\"Themes\"] = gkg[\"Themes\"].apply(lambda x: re.split(\";|,\", str(x))[:-1:2])\n    gkg[\"Persons\"] = gkg[\"Persons\"].apply(lambda x: re.split(\";\", str(x)))\n    gkg[\"Organization\"] = gkg[\"Organization\"].apply(lambda x: re.split(\";|,\", str(x))[:-1:2])\n    gkg[\"Tone\"] = gkg[\"Tone\"].apply(lambda x: float(re.split(\",\", str(x))[0]))\n    gkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: str(x).replace(\"'\", \" \"))\n    gkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: re.split(\";|#\", str(x))[1::9])\n    \n    gkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: \"{'no location(s) mentionned'}\" if x==[] else \"{'\"+\"', '\".join(x)+\"'}\")\n    gkg[\"Persons\"] = gkg[\"Persons\"].apply(lambda x: \"{'no person(s) mentionned'}\" if x==['nan'] else \"{'\"+\"', '\".join(x)+\"'}\")\n    \n    gkg[\"Themes\"] =  gkg[\"Themes\"].apply(lambda x: \"{'\"+\"', '\".join(x)+\"'}\")\n    \n    \n    df_list[\"gkg\"] = gkg \n    return df_list\n    \n    \n#----- CREATE TABLES FOR EACH REQUEST -----#\ndef getTable1(df_list):\n    table1 = df_list['events'][['GlobalEventID','Day','Action_GeoCountryCode']]\\\n        .merge(df_list['mentions'][['GlobalEventID','MentionID','MentionDocTranslationalInfo']],\n                 on=\"GlobalEventID\")\n    table1 = table1[['GlobalEventID', 'Day', 'MentionID', 'Action_GeoCountryCode', 'MentionDocTranslationalInfo']]\n    table1 =table1.fillna('NA')\n    return table1\n\ndef getTable2(df_list):\n    table2 = df_list['events'][['GlobalEventID','Day','Month', 'Year','NumMentions','Action_GeoCountryCode']]\n    return table2\n\ndef getTable3(df_list):\n    table3 = df_list['gkg'][[\"Day\",\"Month\",\n                  \"SourceCommonName\",\n                  \"DocumentIdentifier\",\n                  \"Themes\",\n                  \"Locations\",\n                  \"Persons\",\n                  \"Tone\"]]\n    table3['Tone'] = table3['Tone'].apply(lambda x: round(x,6))             \n    return table3\n\ndef getTable4(df_list):\n    table4 = df_list['events'][[\"SourceURL\", \"Day\", \"Month\", \"AverageTone\", \"Actor1_GeoCountryCode\",\n                                \"Actor2_GeoCountryCode\"]]\\\n        .merge(df_list['gkg'][[\"DocumentIdentifier\", \"Themes\"]],\n                 left_on=\"SourceURL\",\n                 right_on=\"DocumentIdentifier\")\n    \n    # Enlever l'une des colonnes ayant servis pour le merge.\n    table4 = table4.drop([\"DocumentIdentifier\"], axis=1)\n    \n    return table4\n\ndef makeTables(df_list):\n    tables = {}\n    tables['nb_articles_events']= getTable1(df_list)\n    tables['countries_events']= getTable2(df_list)\n    tables['data_source']= getTable3(df_list)\n    tables['relationship']= getTable4(df_list)\n    return tables\n    \n\n#----- INSERT TABLES IN CASSANDRA -----#\ndef SQL_INSERT_STATEMENT_FROM_DATAFRAME(SOURCE, TARGET):\n    sql_texts = []\n    for index, row in SOURCE.iterrows():\n        stat = 'INSERT INTO '+TARGET+' ('+ str(', '.join(SOURCE.columns))+ ') VALUES '+ str(tuple(row.values)).replace('\\\"{\\'',\"{'\")\n        stat = stat.replace(\"\\'}\\\"\",\"\\'}\")\n       # stat = stat.replace(\"\\'null\\'\",\" null \")\n        sql_texts.append( stat)\n    return sql_texts\n    \ndef urls_to_import(year, month, day, hours, minutes, df_file_list):\n    return df_file_list.filter(regex='^'+year+month+day+hours+minutes, axis=0)\n    \n########### Helpers    \n    \ndef fetch_and_mark_data(session, amount : int ):\n    dates = []\n    try:\n        rows = session.execute('SELECT date FROM importstatus WHERE status = \\'pending\\' ALLOW FILTERING')\n        for idx, user_row in enumerate(rows):\n            dates.append(user_row.date)\n            statement = f'UPDATE importstatus SET status = \\'doing\\'   WHERE date = {user_row.date} IF EXISTS'\n            session.execute(statement )\n            if idx  >amount-2:\n                break\n            \n    except Exception as e:\n        print(e)\n        print(statement)\n    \n    return dates\n    \ndef make_df(to_import):\n    df = pd.DataFrame(to_import,columns =['date'])\n    df['events'] = df['date'].apply(lambda x:'http://data.gdeltproject.org/gdeltv2/'+str(x)+'.export.CSV.zip' )\n    df['mentions'] = df['date'].apply(lambda x:'http://data.gdeltproject.org/gdeltv2/'+str(x)+'.mentions.CSV.zip' )\n    df['gkg'] = df['date'].apply(lambda x:'http://data.gdeltproject.org/gdeltv2/'+str(x)+'.gkg.csv.zip' )\n    \n    df = df.set_index('date')\n\n    return df\n        ",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T23:06:02+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644408334554_1278989170",
      "id": "paragraph_1644408334554_1278989170",
      "dateCreated": "2022-02-09T12:05:34+0000",
      "dateStarted": "2022-02-09T23:06:02+0000",
      "dateFinished": "2022-02-09T23:06:03+0000",
      "status": "FINISHED",
      "$$hashKey": "object:107"
    },
    {
      "text": "%python.ipython\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf_urls_to_import = make_df(fetch_and_mark_data(session, 30))\nprint(len(df_urls_to_import))\ndoonnne =0\nerrors = {}\ntry:\n    for index, urls in df_urls_to_import.iterrows():\n        doonnne +=1\n        try:\n            start_time = time.perf_counter()\n            df_list_events_mentions_gkg = get_df(urls)\n            tables_for_requests = makeTables(df_list_events_mentions_gkg)\n            status = {}\n            all_good = True\n            for table in tables_for_requests:\n                done = 0\n                SQL_test = SQL_INSERT_STATEMENT_FROM_DATAFRAME(tables_for_requests[table].fillna('null'), table)\n        \n                for statement in SQL_test:\n                    try:\n                        session.execute(statement)\n                        done+=1\n                    except Exception as e:\n                        errors[str(index) + '-' + str(done) + \"-\" +  table] = {\"error\" : e}\n                        continue\n                    \n                statement = f'UPDATE importstatus SET {table} = \\'{done}/{len(SQL_test)}\\'  WHERE date = {index} IF EXISTS'\n                if done != len(SQL_test) :\n                    all_good = False\n                session.execute(statement)\n                \n                \n            \n            statement = f'UPDATE importstatus SET status = \\'done\\'  WHERE date = {index} IF EXISTS'\n            if not all_good:\n                statement = f'UPDATE importstatus SET status = \\'partial_done\\'  WHERE date = {index} IF EXISTS'\n            session.execute(statement)\n            \n            print(f\"{index} done in {time.perf_counter() - start_time}\" )\n        except Exception as e:\n            statement = f'UPDATE importstatus SET status = \\'failed\\'  WHERE date = {index} IF EXISTS'\n            session.execute(statement)\n            print(f\"{index} failed in  {time.perf_counter() - start_time}\" )\n            print(e)\n            print(traceback.format_exc())\n            \nexcept Exception as e:\n    print(e)\n    print(traceback.format_exc())\n    print(f'untrusted statement {statement}')\n    print('sleeping')\n    time.sleep(60*5)\n    try:\n        KEYSPACE = \"gdelt_prod\"\n        cluster = Cluster([ip])\n        session = cluster.connect()\n        session.set_keyspace(KEYSPACE)\n    except Exception as e:\n        print(e)\n        print(traceback.format_exc())\n        ",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T23:34:51+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "30\n20210406223000 done in 21.46225267101545\n20210730003000 done in 26.067870297993068\n20210826141500 done in 20.23281793197384\nError from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=\"CAS operation timed out - encountered contentions: 0\" info={'consistency': 'SERIAL', 'required_responses': 2, 'received_responses': 1, 'write_type': 'CAS'}\nTraceback (most recent call last):\n  File \"/tmp/ipykernel_338673/4053285903.py\", line 32, in <module>\n    session.execute(statement)\n  File \"cassandra/cluster.py\", line 2618, in cassandra.cluster.Session.execute\n  File \"cassandra/cluster.py\", line 4894, in cassandra.cluster.ResponseFuture.result\ncassandra.WriteTimeout: Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=\"CAS operation timed out - encountered contentions: 0\" info={'consistency': 'SERIAL', 'required_responses': 2, 'received_responses': 1, 'write_type': 'CAS'}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/ipykernel_338673/4053285903.py\", line 44, in <module>\n    session.execute(statement)\n  File \"cassandra/cluster.py\", line 2618, in cassandra.cluster.Session.execute\n  File \"cassandra/cluster.py\", line 4894, in cassandra.cluster.ResponseFuture.result\ncassandra.WriteTimeout: Error from server: code=1100 [Coordinator node timed out waiting for replica nodes' responses] message=\"CAS operation timed out - encountered contentions: 0\" info={'consistency': 'SERIAL', 'required_responses': 2, 'received_responses': 1, 'write_type': 'CAS'}\n\nuntrusted statement UPDATE importstatus SET status = 'failed'  WHERE date = 20210821053000 IF EXISTS\nsleeping\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644408350742_1011633043",
      "id": "paragraph_1644408350742_1011633043",
      "dateCreated": "2022-02-09T12:05:50+0000",
      "dateStarted": "2022-02-09T23:34:51+0000",
      "dateFinished": "2022-02-09T23:41:13+0000",
      "status": "FINISHED",
      "$$hashKey": "object:108"
    },
    {
      "text": "%python.ipython\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf_urls_to_import = make_df(['20210325180000'])",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:07:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644408361144_1138890304",
      "id": "paragraph_1644408361144_1138890304",
      "dateCreated": "2022-02-09T12:06:01+0000",
      "dateStarted": "2022-02-09T13:07:04+0000",
      "dateFinished": "2022-02-09T13:07:04+0000",
      "status": "FINISHED",
      "$$hashKey": "object:109"
    },
    {
      "text": "%python.ipython\ndf_urls_to_import.values",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:07:07+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "array([['http://data.gdeltproject.org/gdeltv2/20210325180000.export.CSV.zip',\n        'http://data.gdeltproject.org/gdeltv2/20210325180000.mentions.CSV.zip',\n        'http://data.gdeltproject.org/gdeltv2/20210325180000.gkg.csv.zip']],\n      dtype=object)"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644409902760_487460726",
      "id": "paragraph_1644409902760_487460726",
      "dateCreated": "2022-02-09T12:31:42+0000",
      "dateStarted": "2022-02-09T13:07:07+0000",
      "dateFinished": "2022-02-09T13:07:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:110"
    },
    {
      "text": "%python.ipython\ndf_urls_to_import\ndf_list_events_mentions_gkg = get_df(df_urls_to_import.iloc[0])\n#tables_for_requests = makeTables(df_list_events_mentions_gkg)\n",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:07:14+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)\nInput \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m df_urls_to_import\n\u001b[0;32m----> 2\u001b[0m df_list_events_mentions_gkg \u001b[38;5;241m=\u001b[39m \u001b[43mget_df\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdf_urls_to_import\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43miloc\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\nInput \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36mget_df\u001b[0;34m(df_row)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;66;03m# GKG preprocessing\u001b[39;00m\n\u001b[1;32m     50\u001b[0m gkg \u001b[38;5;241m=\u001b[39m df_list[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgkg\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m---> 51\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDay\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mgkg\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDate\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     52\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m6\u001b[39m]))\n\u001b[1;32m     53\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m4\u001b[39m]))\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/series.py:4430\u001b[0m, in \u001b[0;36mSeries.apply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4320\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\n\u001b[1;32m   4321\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   4322\u001b[0m     func: AggFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4325\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   4326\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[1;32m   4327\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4328\u001b[0m \u001b[38;5;124;03m    Invoke function on values of Series.\u001b[39;00m\n\u001b[1;32m   4329\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4428\u001b[0m \u001b[38;5;124;03m    dtype: float64\u001b[39;00m\n\u001b[1;32m   4429\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4430\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mSeriesApply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/apply.py:1082\u001b[0m, in \u001b[0;36mSeriesApply.apply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1078\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mf, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m   1079\u001b[0m     \u001b[38;5;66;03m# if we are a string, try to dispatch\u001b[39;00m\n\u001b[1;32m   1080\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_str()\n\u001b[0;32m-> 1082\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_standard\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/apply.py:1137\u001b[0m, in \u001b[0;36mSeriesApply.apply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         values \u001b[38;5;241m=\u001b[39m obj\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m)\u001b[38;5;241m.\u001b[39m_values\n\u001b[1;32m   1132\u001b[0m         \u001b[38;5;66;03m# error: Argument 2 to \"map_infer\" has incompatible type\u001b[39;00m\n\u001b[1;32m   1133\u001b[0m         \u001b[38;5;66;03m# \"Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]],\u001b[39;00m\n\u001b[1;32m   1134\u001b[0m         \u001b[38;5;66;03m# Dict[Hashable, Union[Union[Callable[..., Any], str],\u001b[39;00m\n\u001b[1;32m   1135\u001b[0m         \u001b[38;5;66;03m# List[Union[Callable[..., Any], str]]]]]\"; expected\u001b[39;00m\n\u001b[1;32m   1136\u001b[0m         \u001b[38;5;66;03m# \"Callable[[Any], Any]\"\u001b[39;00m\n\u001b[0;32m-> 1137\u001b[0m         mapped \u001b[38;5;241m=\u001b[39m \u001b[43mlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_infer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1138\u001b[0m \u001b[43m            \u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1139\u001b[0m \u001b[43m            \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[arg-type]\u001b[39;49;00m\n\u001b[1;32m   1140\u001b[0m \u001b[43m            \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1141\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1143\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(mapped) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(mapped[\u001b[38;5;241m0\u001b[39m], ABCSeries):\n\u001b[1;32m   1144\u001b[0m     \u001b[38;5;66;03m# GH#43986 Need to do list(mapped) in order to get treated as nested\u001b[39;00m\n\u001b[1;32m   1145\u001b[0m     \u001b[38;5;66;03m#  See also GH#25959 regarding EA support\u001b[39;00m\n\u001b[1;32m   1146\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39m_constructor_expanddim(\u001b[38;5;28mlist\u001b[39m(mapped), index\u001b[38;5;241m=\u001b[39mobj\u001b[38;5;241m.\u001b[39mindex)\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/_libs/lib.pyx:2870\u001b[0m, in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n\nInput \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36mget_df.<locals>.<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[38;5;66;03m# GKG preprocessing\u001b[39;00m\n\u001b[1;32m     50\u001b[0m gkg \u001b[38;5;241m=\u001b[39m df_list[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgkg\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m---> 51\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDay\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     52\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m6\u001b[39m]))\n\u001b[1;32m     53\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m4\u001b[39m]))\n\n\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'nan'"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644409126048_1338283509",
      "id": "paragraph_1644409126048_1338283509",
      "dateCreated": "2022-02-09T12:18:46+0000",
      "dateStarted": "2022-02-09T13:07:14+0000",
      "dateFinished": "2022-02-09T13:07:16+0000",
      "status": "ERROR",
      "$$hashKey": "object:111"
    },
    {
      "text": "%python.ipython\ndf_row = df_urls_to_import.iloc[0]\ncol2keep = {0: [0, 1, 2, 3, 12, 22, 31, 33, 34, 37, 45, 53, 60],\n            1: [0, 1, 5, 15],\n            2: [0, 1, 3, 4, 8, 10, 11, 12, 15]}\ncolnames = {0: [\"GlobalEventID\",\n               \"Day\",\n               \"Month\",\n               \"Year\",\n               \"Actor1_Type1Code\",\n               \"Actor2_Type1Code\",\n               \"NumMentions\",\n               \"NumArticles\",\n               \"AverageTone\",\n               \"Actor1_GeoCountryCode\",\n               \"Actor2_GeoCountryCode\",\n               \"Action_GeoCountryCode\",  #pas utilisé 04/02\n               \"SourceURL\"],\n            1: [\"GlobalEventID\",\n                \"EventTimeDate\",\n                \"MentionID\",\n                \"MentionDocTranslationalInfo\"],\n            2:[\"GKGRecordID\",\n               \"Date\", #V2_1_\n               \"SourceCommonName\", #V2_\n               \"DocumentIdentifier\", #V2\n               \"Themes\", #V2_Enhanced\n               \"Locations\", #V2_Enhanced\n               \"Persons\", #V1_ \n               \"Organization\", #V2_Enhanced #pas utilisé 04/02\n               \"Tone\"]} #V2_\nnames = ['events','mentions','gkg']\nerrors = []\ndf_list = {}\nurl_list = [df_row['events'],df_row['mentions'],df_row['gkg']]\n\nfor i, link in enumerate(url_list):\n    df_list[names[i]]=pd.read_table(link,\n                                    header=None,\n                                    usecols=col2keep[i],\n                                    names=colnames[i],\n                                    encoding='ISO-8859-1')\n",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:10:49+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644412161643_1375307428",
      "id": "paragraph_1644412161643_1375307428",
      "dateCreated": "2022-02-09T13:09:21+0000",
      "dateStarted": "2022-02-09T13:10:49+0000",
      "dateFinished": "2022-02-09T13:10:49+0000",
      "status": "FINISHED",
      "$$hashKey": "object:112"
    },
    {
      "text": "%python.ipython\ngkg = df_list[\"gkg\"].copy()\ngkg = gkg[gkg['Date'].notna()]\ngkg.info()",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:15:55+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 2212 entries, 0 to 2212\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   GKGRecordID         2212 non-null   object \n 1   Date                2212 non-null   float64\n 2   SourceCommonName    2212 non-null   object \n 3   DocumentIdentifier  2212 non-null   object \n 4   Themes              1989 non-null   object \n 5   Locations           1604 non-null   object \n 6   Persons             1751 non-null   object \n 7   Organization        1722 non-null   object \n 8   Tone                2212 non-null   object \ndtypes: float64(1), object(8)\nmemory usage: 172.8+ KB\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644412468692_566106590",
      "id": "paragraph_1644412468692_566106590",
      "dateCreated": "2022-02-09T13:14:28+0000",
      "dateStarted": "2022-02-09T13:15:55+0000",
      "dateFinished": "2022-02-09T13:15:55+0000",
      "status": "FINISHED",
      "$$hashKey": "object:113"
    },
    {
      "text": "%python.ipython\ngkg = df_list[\"gkg\"].copy()\ngkg[gkg['Date'].isna()]\ngkg.info()",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:13:40+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2213 entries, 0 to 2212\nData columns (total 9 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   GKGRecordID         2213 non-null   object \n 1   Date                2212 non-null   float64\n 2   SourceCommonName    2212 non-null   object \n 3   DocumentIdentifier  2212 non-null   object \n 4   Themes              1989 non-null   object \n 5   Locations           1604 non-null   object \n 6   Persons             1751 non-null   object \n 7   Organization        1722 non-null   object \n 8   Tone                2212 non-null   object \ndtypes: float64(1), object(8)\nmemory usage: 155.7+ KB\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644412262117_605551296",
      "id": "paragraph_1644412262117_605551296",
      "dateCreated": "2022-02-09T13:11:02+0000",
      "dateStarted": "2022-02-09T13:13:40+0000",
      "dateFinished": "2022-02-09T13:13:40+0000",
      "status": "FINISHED",
      "$$hashKey": "object:114"
    },
    {
      "text": "%python.ipython\n# GKG preprocessing\ngkg = df_list[\"gkg\"].copy()\ngkg[\"Day\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:8]))\ngkg[\"Month\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:6]))\ngkg[\"Year\"] = gkg[\"Date\"].apply(lambda x: int(str(x)[:4]))\ngkg[\"Themes\"] = gkg[\"Themes\"].apply(lambda x: re.split(\";|,\", str(x))[:-1:2])\ngkg[\"Persons\"] = gkg[\"Persons\"].apply(lambda x: re.split(\";\", str(x)))\ngkg[\"Organization\"] = gkg[\"Organization\"].apply(lambda x: re.split(\";|,\", str(x))[:-1:2])\ngkg[\"Tone\"] = gkg[\"Tone\"].apply(lambda x: float(re.split(\",\", str(x))[0]))\ngkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: str(x).replace(\"'\", \" \"))\ngkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: re.split(\";|#\", str(x))[1::9])\n\ngkg[\"Locations\"] = gkg[\"Locations\"].apply(lambda x: \"{'no location(s) mentionned'}\" if x==[] else \"{'\"+\"', '\".join(x)+\"'}\")\ngkg[\"Persons\"] = gkg[\"Persons\"].apply(lambda x: \"{'no person(s) mentionned'}\" if x==['nan'] else \"{'\"+\"', '\".join(x)+\"'}\")\n\ngkg[\"Themes\"] =  gkg[\"Themes\"].apply(lambda x: \"{'\"+\"', '\".join(x)+\"'}\")\n\n\ndf_list[\"gkg\"] = gkg ",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:10:53+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)\nInput \u001b[0;32mIn [12]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# GKG preprocessing\u001b[39;00m\n\u001b[1;32m      2\u001b[0m gkg \u001b[38;5;241m=\u001b[39m df_list[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgkg\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m----> 3\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDay\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mgkg\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mDate\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m6\u001b[39m]))\n\u001b[1;32m      5\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m4\u001b[39m]))\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/series.py:4430\u001b[0m, in \u001b[0;36mSeries.apply\u001b[0;34m(self, func, convert_dtype, args, **kwargs)\u001b[0m\n\u001b[1;32m   4320\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply\u001b[39m(\n\u001b[1;32m   4321\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m   4322\u001b[0m     func: AggFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4325\u001b[0m     \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs,\n\u001b[1;32m   4326\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[1;32m   4327\u001b[0m     \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   4328\u001b[0m \u001b[38;5;124;03m    Invoke function on values of Series.\u001b[39;00m\n\u001b[1;32m   4329\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   4428\u001b[0m \u001b[38;5;124;03m    dtype: float64\u001b[39;00m\n\u001b[1;32m   4429\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m-> 4430\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mSeriesApply\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/apply.py:1082\u001b[0m, in \u001b[0;36mSeriesApply.apply\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1078\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mf, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m   1079\u001b[0m     \u001b[38;5;66;03m# if we are a string, try to dispatch\u001b[39;00m\n\u001b[1;32m   1080\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_str()\n\u001b[0;32m-> 1082\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_standard\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/core/apply.py:1137\u001b[0m, in \u001b[0;36mSeriesApply.apply_standard\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         values \u001b[38;5;241m=\u001b[39m obj\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;28mobject\u001b[39m)\u001b[38;5;241m.\u001b[39m_values\n\u001b[1;32m   1132\u001b[0m         \u001b[38;5;66;03m# error: Argument 2 to \"map_infer\" has incompatible type\u001b[39;00m\n\u001b[1;32m   1133\u001b[0m         \u001b[38;5;66;03m# \"Union[Callable[..., Any], str, List[Union[Callable[..., Any], str]],\u001b[39;00m\n\u001b[1;32m   1134\u001b[0m         \u001b[38;5;66;03m# Dict[Hashable, Union[Union[Callable[..., Any], str],\u001b[39;00m\n\u001b[1;32m   1135\u001b[0m         \u001b[38;5;66;03m# List[Union[Callable[..., Any], str]]]]]\"; expected\u001b[39;00m\n\u001b[1;32m   1136\u001b[0m         \u001b[38;5;66;03m# \"Callable[[Any], Any]\"\u001b[39;00m\n\u001b[0;32m-> 1137\u001b[0m         mapped \u001b[38;5;241m=\u001b[39m \u001b[43mlib\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_infer\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1138\u001b[0m \u001b[43m            \u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1139\u001b[0m \u001b[43m            \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# type: ignore[arg-type]\u001b[39;49;00m\n\u001b[1;32m   1140\u001b[0m \u001b[43m            \u001b[49m\u001b[43mconvert\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert_dtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1141\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1143\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(mapped) \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(mapped[\u001b[38;5;241m0\u001b[39m], ABCSeries):\n\u001b[1;32m   1144\u001b[0m     \u001b[38;5;66;03m# GH#43986 Need to do list(mapped) in order to get treated as nested\u001b[39;00m\n\u001b[1;32m   1145\u001b[0m     \u001b[38;5;66;03m#  See also GH#25959 regarding EA support\u001b[39;00m\n\u001b[1;32m   1146\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39m_constructor_expanddim(\u001b[38;5;28mlist\u001b[39m(mapped), index\u001b[38;5;241m=\u001b[39mobj\u001b[38;5;241m.\u001b[39mindex)\n\nFile \u001b[0;32m~/.local/lib/python3.8/site-packages/pandas/_libs/lib.pyx:2870\u001b[0m, in \u001b[0;36mpandas._libs.lib.map_infer\u001b[0;34m()\u001b[0m\n\nInput \u001b[0;32mIn [12]\u001b[0m, in \u001b[0;36m<lambda>\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# GKG preprocessing\u001b[39;00m\n\u001b[1;32m      2\u001b[0m gkg \u001b[38;5;241m=\u001b[39m df_list[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgkg\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mcopy()\n\u001b[0;32m----> 3\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDay\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mstr\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m8\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m      4\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mMonth\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m6\u001b[39m]))\n\u001b[1;32m      5\u001b[0m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYear\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m gkg[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDate\u001b[39m\u001b[38;5;124m\"\u001b[39m]\u001b[38;5;241m.\u001b[39mapply(\u001b[38;5;28;01mlambda\u001b[39;00m x: \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28mstr\u001b[39m(x)[:\u001b[38;5;241m4\u001b[39m]))\n\n\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'nan'"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644412229447_1879168318",
      "id": "paragraph_1644412229447_1879168318",
      "dateCreated": "2022-02-09T13:10:29+0000",
      "dateStarted": "2022-02-09T13:10:53+0000",
      "dateFinished": "2022-02-09T13:10:53+0000",
      "status": "ERROR",
      "$$hashKey": "object:115"
    },
    {
      "text": "%python.ipython\n",
      "user": "anonymous",
      "dateUpdated": "2022-02-09T13:10:53+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1644412253077_1196151299",
      "id": "paragraph_1644412253077_1196151299",
      "dateCreated": "2022-02-09T13:10:53+0000",
      "status": "READY",
      "$$hashKey": "object:116"
    }
  ],
  "name": "Manual_Importer",
  "id": "2GUG624YV",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Manual_Importer"
}